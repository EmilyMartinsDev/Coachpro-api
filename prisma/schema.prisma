generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Coach {
  id             String           @id @default(uuid())
  nome           String
  email          String           @unique
  senha          String
  telefone       String
  dataNascimento DateTime
  foto           String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  alunos         Aluno[]
  planosTreino   PlanoTreino[]
  planosAlimentar PlanoAlimentar[]
}

model Aluno {
  id             String           @id @default(uuid())
  nome           String
  email          String           @unique
  senha          String
  telefone       String
  dataNascimento DateTime
  coachId        String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  coach          Coach            @relation(fields: [coachId], references: [id])
  assinaturas    Assinatura[]
  feedbacks      Feedback[]
  planosTreino   PlanoTreino[]
  planosAlimentar PlanoAlimentar[]
  anamnese       Anamnese?
}

model Plano {
  id          String       @id @default(uuid())
  titulo      String
  descricao   String?
  valor       Float
  duracao     Int          // Duração em meses
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assinaturas Assinatura[]
}

model Assinatura {
  id                   String       @id @default(uuid())
  alunoId              String
  planoId              String
  status               StatusAssinatura
  dataInicio           DateTime
  dataFim              DateTime
  valor                Float
  parcela              Int          @default(0)
  totalParcelas        Int
  comprovante_pagamento Bytes?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  aluno                Aluno        @relation(fields: [alunoId], references: [id])
  plano                Plano        @relation(fields: [planoId], references: [id])
}


model PlanoTreino {
  id            String   @id @default(uuid())
  titulo        String
  descricao     String?
  caminhoArquivo String
  alunoId       String
  coachId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  aluno         Aluno    @relation(fields: [alunoId], references: [id])
  coach         Coach    @relation(fields: [coachId], references: [id])
}

model PlanoAlimentar {
  id            String   @id @default(uuid())
  titulo        String
  descricao     String?
  caminhoArquivo String
  alunoId       String
  coachId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  aluno         Aluno    @relation(fields: [alunoId], references: [id])
  coach         Coach    @relation(fields: [coachId], references: [id])
}

model Feedback {
  id                 String         @id @default(uuid())
  alunoId            String
  peso               String?
  diaFeedback        String
  seguiuPlano        PlanoStatus
  comeuAMais         String?
  refeicoesPerdidas  String?
  refeicaoLivre      String?
  digestaoIntestino  String?
  dificuldadeAlimentos String?
  periodoMenstrual   Boolean
  horasSono          String?
  qualidadeSono      QualidadeSono
  acordouCansado     Boolean
  manteveProtocolo   PlanoStatus
  efeitosColaterais  String?
  observacoes        String?
  respondido         Boolean        @default(false)
  respostaCoach      String?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  aluno              Aluno          @relation(fields: [alunoId], references: [id])
  fotos              FotoFeedback[]
}

model FotoFeedback {
  id         String   @id @default(uuid())
  feedbackId String
  data       Bytes? // arquivo binário
  createdAt  DateTime @default(now())
  feedback   Feedback @relation(fields: [feedbackId], references: [id])
}

model Anamnese {
  id                String   @id @default(uuid())
  alunoId           String   @unique
  nomeCompleto      String
  instagram         String
  email             String
  cpf               String
  endereco          String
  dataNascimento    DateTime
  dataPreenchimento DateTime
  altura            String
  peso              String
  medidaCintura     String?
  medidaAbdomen     String?
  medidaQuadril     String?
  possuiExames      Boolean
  rotina            String
  objetivos         String
  tempoTreino       String
  modalidade        String
  divisaoTreino     String
  cardio            String
  alimentacaoDiaria String
  alimentosPreferidos String
  intolerancias     String?
  qtdRefeicoes      String
  horariosFome      String?
  suplementos       String?
  anabolizantes     String?
  lesoes            String?
  problemasSaude    String?
  evolucaoRecente   String
  dificuldades      String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  aluno             Aluno    @relation(fields: [alunoId], references: [id])
}

enum StatusAssinatura {
  ATIVA
  PENDENTE
  INATIVA
  PENDENTE_APROVACAO
  CANCELADA
}

enum PlanoStatus {
  TOTALMENTE
  PARCIALMENTE
  NAO
}

enum QualidadeSono {
  OTIMA
  BOA
  REGULAR
  RUIM
  PESSIMA
}